version: '3.9'

services:
  db:
    image: timescale/timescaledb:2.13.0-pg15
    container_name: timescale-db
    restart: always
    env_file:
      - .env                        # load POSTGRES_USERNAME, POSTGRES_PASSWORD, POSTGRES_DB
    environment:
      PGDATA: /var/lib/postgresql/data
    volumes:
      - timescale-data:/var/lib/postgresql/data
    ports:
      - "5433:5432"                 # host:container
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USERNAME} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.2-alpine
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  adminer:
    image: adminer
    container_name: adminer
    restart: always
    depends_on:
      db:
        condition: service_healthy
    environment:
      ADMINER_DEFAULT_SERVER: timescale-db
    ports:
      - "8082:8080"

  backend_app:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend_app
    restart: always
    env_file:
      - .env                        # load all your POSTGRES_*, JWT_*, etc.
    environment:
      POSTGRES_HOST: timescale-db   # point at the service name
      REDIS_HOST: redis            # point at the redis service
      REDIS_PORT: 6379
      BACKEND_SERVER_HOST: 0.0.0.0
      BACKEND_SERVER_PORT: 8000
      # …other variables will come from .env…
    volumes:
      - ./backend:/usr/backend
    ports:
      - "8001:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

volumes:
  timescale-data:
  redis-data:
